<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.tm.mapper.ScoreInfoMapper">
    
    <resultMap type="ScoreInfo" id="ScoreInfoResult">
        <result property="id"    column="id"    />
        <result property="usualPor"    column="usual_por"    />
        <result property="usualSco"    column="usual_sco"    />
        <result property="midPor"    column="mid_por"    />
        <result property="midSco"    column="mid_sco"    />
        <result property="finalPor"    column="final_por"    />
        <result property="finalSco"    column="final_sco"    />
        <result property="others"    column="others"    />
        <result property="chooseId"    column="choose_id"    />
        <result property="courseId"  column="course_id"/>
        <result property="courseName" column="courseName" />
        <result property="term" column="start_sem"/>
        <result property="year" column="start_year"/>
        <result property="pass" column="pass"/>
        <result property="rank" column="rank"/>
        <result property="average" column="average"/>
        <result property="studentId" column="studentId"/>
        <result property="studentName" column="studentName"/>
    </resultMap>

    <sql id="selectScoreInfoVo">
        SELECT S.id, usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, others, pass, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem, AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) as average,RANK() OVER(PARTITION BY C.id ORDER BY AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) desc) AS 'rank'
        FROM score_info AS S, choose_course AS CH, course_info AS C
    </sql>

    <sql id = "selectRankInfoVo">
        SELECT S.id, usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, others, pass, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem,RANK() OVER(PARTITION BY C.id ORDER BY AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) desc) AS 'rank'
        FROM score_info AS S, choose_course AS CH, course_info AS C
        WHERE S.choose_id = CH.id AND C.id = CH.course_id
        GROUP BY S.id
    </sql>

    <sql id = "selectCourseStuInfoVo">
        SELECT S.id, CH.stu_id AS studentId ,usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, pass, others, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem
        FROM score_info AS S, choose_course AS CH, course_info AS C
    </sql>

    <select id="selectRankInfoList" parameterType="ScoreInfo" resultMap="ScoreInfoResult">
        <include refid="selectRankInfoVo"/>
        WHERE S.choose_id = C.id AND course_id = #{courseId}
        GROUP BY id
    </select>



    <select id="selectScoreInfoList" parameterType="ScoreInfo" resultMap="ScoreInfoResult">
        <include refid="selectScoreInfoVo"/>
        <where>  
            <if test="usualPor != null "> and usual_por = #{usualPor}</if>
            <if test="usualSco != null "> and usual_sco = #{usualSco}</if>
            <if test="midPor != null "> and mid_por = #{midPor}</if>
            <if test="midSco != null "> and mid_sco = #{midSco}</if>
            <if test="finalPor != null "> and final_por = #{finalPor}</if>
            <if test="finalSco != null "> and final_sco = #{finalSco}</if>
            <if test="others != null  and others != ''"> and others = #{others}</if>
            <if test="chooseId != null "> and choose_id = #{chooseId}</if>
            <if test="courseName != null  and courseName != '' "> and courseName = #{courseName}</if>
            <if test="year != null  and  year != ''"> and start_year = #{year}</if>
            <if test="term != null and term != '' " > and start_sem = #{term}</if>
            and S.choose_id = CH.id and
            C.id = CH.course_id
        </where>
        group by S.id
    </select>
    
    <select id="selectScoreInfoById" parameterType="Long" resultMap="ScoreInfoResult">
        <include refid="selectScoreInfoVo"/>
        where S.id = #{id}
        and S.choose_id = CH.id
        and C.id = CH.course_id
        group by S.id
    </select>

    <select id="selectScoreInfoByCourseId" parameterType="Long" resultMap="ScoreInfoResult">
        SELECT S.id, usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, pass, others, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem
        FROM score_info AS S, choose_course AS CH, course_info AS C
        where C.id = #{courseId} and
        S.choose_id = CH.id and
        C.id = CH.course_id
    </select>

    <sql id="selectScoreInfoByMTeacherVo">
        SELECT S.id, usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, others, pass, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem, AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) as average, RANK() OVER(PARTITION BY C.id ORDER BY AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) desc) AS 'rank'
        FROM score_info AS S, choose_course AS CH, course_info AS C, tea_info AS T, major_info AS M, faculties_info AS F,
    </sql>

    <select id="selectScoreInfoByMTeacherId" parameterType="Long" resultMap="ScoreInfoResult">
        <include refid="selectScoreInfoByMTeacherVo"/>
        WHERE S.choose_id = CH.id
        AND C.id = CH.course_id
        AND T.type = "教务老师"
        AND C.fac_id = F.id
        AND F.teach_id = T.id
        AND T.id = #{id}
        GROUP BY S.id
    </select>

    <sql id="selectAvgScoreInfoByMTeacherVo">
        SELECT start_year, start_sem, AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) as average
        FROM score_info AS S, choose_course AS CH, course_info AS C, tea_info AS T, major_info AS M, faculties_info AS F
    </sql>

    <select id="selectAvgScoreInfoByMTeacherId" parameterType="Long" resultMap="ScoreInfoResult">
        <include refid="selectAvgScoreInfoByMTeacherVo"/>
        WHERE S.choose_id = CH.id
          AND C.id = CH.course_id
          AND T.type = "教务老师"
          AND C.fac_id = F.id
          AND F.teach_id = T.id
          AND T.id = #{id}
        GROUP BY start_sem, start_year
    </select>

    <sql id="selectScoreInfoByTeacherVo">
        SELECT S.id, usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, others, pass, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem,RANK() OVER(PARTITION BY C.id ORDER BY AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) desc) AS 'rank'
        FROM score_info AS S, choose_course AS CH, course_info AS C
    </sql>

    <select id="selectScoreInfoByTeacherId" parameterType="Long" resultMap="ScoreInfoResult">
        <include refid="selectScoreInfoByTeacherVo"/>
        WHERE S.choose_id = CH.id
        AND C.id = CH.course_id
        AND C.teach_id = #{id}
        GROUP BY S.id
    </select>


    <select id="selectUnPassByTeacherId" parameterType="Long" resultMap="ScoreInfoResult">
        <include refid="selectScoreInfoByTeacherVo"/>
        WHERE S.choose_id = CH.id
        AND C.id = CH.course_id
        AND C.teach_id = #{id}
        AND pass = 0
        GROUP BY S.id
    </select>


    <sql id="selectScoreByClassId">
        SELECT S.id, usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, others, pass, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem, STU.name
        FROM score_info AS S, choose_course AS CH, course_info AS C, class_info AS CS, stu_info AS STU
    </sql>

<!--    根据班级id查询学生成绩信息-->
    <select id="selectScoreByClassId" parameterType="Long" resultMap="ScoreInfoResult">
        <include refid="selectScoreByClassId"/>
        WHERE S.choose_id = CH.id
        AND C.id = CH.course_id
        AND STU.class_id = CS.id
        AND STU.id = CH.stu_id
        AND CS.id = #{id}
    </select>

<!--    根据学生id查询学生所有成绩的绩点-->
    <select id="getStuScoreByStuId" parameterType="Long" resultMap="ScoreInfoResult">
        SELECT AVG((final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) * C.credit)/100 as average
        FROM score_info AS S, choose_course AS CH, course_info AS C
        WHERE S.choose_id = CH.id
          AND C.id = CH.course_id
          AND CH.stu_id = #{id}
          AND CH.pass = 1
        GROUP BY CH.stu_id
    </select>

<!--    根据学生id计算平均分-->
    <select id="getStuAvgScoreByStuId" parameterType="Long" resultMap="ScoreInfoResult">
        SELECT AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) as average
        FROM score_info AS S, choose_course AS CH, course_info AS C
        WHERE S.choose_id = CH.id
          AND C.id = CH.course_id
          AND CH.stu_id = #{id}
          AND CH.pass = 1
        GROUP BY CH.stu_id
    </select>

    <select id="getStuScoreInfoByStuId" parameterType="Long" resultMap="ScoreInfoResult">
     -- 通过学生id获取成绩信息
    <include refid="selectScoreInfoVo"/>
        WHERE S.choose_id  = CH.id
        AND CH.course_id = C.id
        AND CH.stu_id = #{id}
        GROUP BY S.id
    </select>

    <select id="getScoreInfoByCourseId" parameterType="Long" resultMap="ScoreInfoResult">
        SELECT S.id, usual_por, usual_sco, mid_por, mid_sco, final_por, final_sco, pass, choose_id,C.id AS course_id, C.name AS courseName, start_year, start_sem,AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) AS average, STU.`name` AS studentName
        FROM score_info AS S, choose_course AS CH, course_info AS C, stu_info AS STU
        where C.id = #{id} and
            S.choose_id = CH.id and
            C.id = CH.course_id AND
            STU.id = CH.stu_id
        GROUP BY S.ID
    </select>

    <select id="getStuScoreAndMRankByStuId" parameterType="Long" resultMap="ScoreInfoResult">
        SELECT `rank`, average
        FROM(SELECT STU.id, RANK() OVER(PARTITION BY M.id ORDER BY AVG((final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) * C.credit)/100 desc) AS 'rank', AVG((final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) * C.credit)/100 AS average
             FROM score_info AS S, choose_course AS CH, course_info AS C, major_info AS M, stu_info AS STU
             WHERE S.choose_id = CH.id
               AND C.id = CH.course_id
               AND CH.stu_id = STU.id
               AND CH.pass = 1
               AND M.id = STU.major_id
             GROUP BY STU.id) AS T
        WHERE T.id = #{id}
    </select>

    <select id="getStuScoreInfo" parameterType="Long" resultMap="ScoreInfoResult">
        SELECT COALESCE(SUM((final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) * C.credit) / NULLIF(SUM(C.credit), 0), 0) as average, STU.`name` AS studentName, STU.id AS studentId
        FROM stu_info AS STU
                 LEFT JOIN choose_course AS CH ON STU.id = CH.stu_id
                 LEFT JOIN score_info AS S ON S.choose_id = CH.id AND CH.pass = 1
                 LEFT JOIN course_info AS C ON C.id = CH.course_id
                 JOIN class_info AS CL ON CL.id = STU.class_id
        WHERE CL.teach_id = #{id}
        GROUP BY STU.id, STU.`name`
    </select>

    <select id="getCourseScoreInfo" parameterType="Long" resultMap="ScoreInfoResult">
        SELECT course_id, courseName, start_year, start_sem, AVG(average) AS average
        FROM (
                 SELECT pass, choose_id, C.id AS course_id, C.name AS courseName, start_year, start_sem,
                        AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) AS average
                 FROM score_info AS S
                          JOIN choose_course AS CH ON S.choose_id = CH.id
                          JOIN course_info AS C ON C.id = CH.course_id
                 WHERE C.teach_id = #{id}
                 GROUP BY S.id
             ) AS subquery
        GROUP BY course_id, courseName, start_year, start_sem;

    </select>


    <select id="getYearAndSemScore" resultMap="ScoreInfoResult">
        SELECT
            C.start_year AS start_year,
            C.start_sem AS start_sem,
            AVG(final_sco*final_por*0.01 + mid_sco*mid_por*0.01 + usual_sco*usual_por*0.01) AS average
        FROM score_info AS S
                 JOIN choose_course AS CH ON S.choose_id = CH.id
                 JOIN course_info AS C ON CH.course_id = C.id
        GROUP BY C.start_year, C.start_sem;
    </select>

    <insert id="insertScoreInfo" parameterType="ScoreInfo" useGeneratedKeys="true" keyProperty="userId">
        insert into score_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="usualPor != null">usual_por,</if>
            <if test="usualSco != null">usual_sco,</if>
            <if test="midPor != null">mid_por,</if>
            <if test="midSco != null">mid_sco,</if>
            <if test="finalPor != null">final_por,</if>
            <if test="finalSco != null">final_sco,</if>
            <if test="others != null and others != ''">others,</if>
             <if test="chooseId != null">choose_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="usualPor != null">#{usualPor},</if>
            <if test="usualSco != null">#{usualSco},</if>
            <if test="midPor != null">#{midPor},</if>
            <if test="midSco != null">#{midSco},</if>
            <if test="finalPor != null">#{finalPor},</if>
            <if test="finalSco != null">#{finalSco},</if>
            <if test="others != null and others != ''">#{others},</if>
            <if test="chooseId != null">#{chooseId},</if>
         </trim>
    </insert>

    <update id="updateScoreInfo" parameterType="ScoreInfo">
        update score_info
        <trim prefix="SET" suffixOverrides=",">
            <if test="usualPor != null">usual_por = #{usualPor},</if>
            <if test="usualSco != null">usual_sco = #{usualSco},</if>
            <if test="midPor != null">mid_por = #{midPor},</if>
            <if test="midSco != null">mid_sco = #{midSco},</if>
            <if test="finalPor != null">final_por = #{finalPor},</if>
            <if test="finalSco != null">final_sco = #{finalSco},</if>
            <if test="others != null and others != ''">others = #{others},</if>
            <if test="chooseId != null">choose_id = #{chooseId},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteScoreInfoById" parameterType="Long">
        delete from score_info where id = #{id}
    </delete>

    <delete id="deleteScoreInfoByIds" parameterType="String">
        delete from score_info where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>